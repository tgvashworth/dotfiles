[color]
	diff = auto
	status = auto
	branch = auto
	ui = true

[help]
	autocorrect = 1

[mergetool]
	keepBackup = true

[rerere]
  enabled = true

[push]
	default = current

[branch]
	autosetuprebase = always

[alias]
	cl = clone
	co = commit
	com = commit -m
	# add and commit with message
	coam = commit -am
	# amend a previous commit
	amend = commit --amend
	append = commit --amend --no-edit
	# nick a patch and make it your own
	steal = commit --amend --reset-author --no-edit
	ch = checkout
	st = status
	br = branch
	# add in patch-mode (interactive)
	ap = add -p
	# undo the last commit
	undo = reset --soft HEAD~1
	# new branch
	nbr = checkout -b
	# try out a merge
	drymerge = merge --no-commit --no-ff
	# wipe away chnges to tracked files
	clear = reset --hard
	# sync up
	sync = !git pull && git push
	# what files changed?
	changed-files = diff-tree --no-commit-id --name-only -r
	# what's staged for commit?
	staged = diff --cached

	# Get the current branch name (not so useful in itself, but used in
	# other aliases)
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	# Push the current branch to the remote "origin", and set it to track
	# the upstream branch
	publish = "!git push -u origin $(git branch-name)"

	# some tasty logging graphs
	# I tend to use lg and lg4
	lg1 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
	lg2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit
	lg3 = !git log --graph --oneline --all --decorate `git reflog | cut -c1-7`
	lg4 = !git log --graph --oneline --decorate
	lg = !git lg1

	# try out a merge
	drymerge = merge --no-commit --no-ff

  # search
	g = grep --break --heading --line-number
[core]
	excludesfile = $HOME/.gitignore
[init]
	defaultBranch = main
